#!/usr/bin/env bash
# vim:ts=2:sw=2:et

shopts=$-
set -Eeuo pipefail

function usage {
  cat <<-EOF
USAGE

  $0 [-adDg] [-s SEED] [-l LANGUAGE] [-e EXAMPLE] [-t TRIAL]

OPTIONS

  -h  Print this message

  -a  Compile C code with the Clang static analyzer

  -l  Run only the corpus tests for the given language

  -e  Run only the corpus tests whose name contain the given string

  -t  Run only the given trial number of randomized test

  -s  Set the seed used to control random behavior

  -d  Print parsing log to stderr

  -D  Generate an SVG graph of parsing logs

  -g  Run the tests with a debugger

EOF
}

export RUST_TEST_THREADS=1
export RUST_BACKTRACE=full

mode=normal
test_flags="-p tree-sitter-cli"

TREE_SITTER_TEST_LANGUAGE_FILTER=
TREE_SITTER_TEST_EXAMPLE_FILTER=
TREE_SITTER_TEST_TRIAL_FILTER=

while getopts "adDghl:e:s:t:" option; do
  case ${option} in
    h)
      usage
      exit
      ;;
    a)
      export RUSTFLAGS="-Z sanitizer=address"
      # Specify a `--target` explicitly. For some reason, this is required for
      # address sanitizer support.
      toolchain=$(rustup show active-toolchain)
      toolchain_regex='(stable|beta|nightly)-([_a-z0-9-]+).*'
      if [[ $toolchain =~ $toolchain_regex ]]; then
        release=${BASH_REMATCH[1]}
        current_target=${BASH_REMATCH[2]}
        test_flags="${test_flags} --target ${current_target}"
      else
        echo "Failed to parse toolchain '${toolchain}'"
      fi
      ;;
    l)
      export TREE_SITTER_TEST_LANGUAGE_FILTER=${OPTARG}
      ;;
    e)
      export TREE_SITTER_TEST_EXAMPLE_FILTER=${OPTARG}
      ;;
    t)
      export TREE_SITTER_TEST_TRIAL_FILTER=${OPTARG}
      ;;
    s)
      export TREE_SITTER_TEST_SEED=${OPTARG}
      ;;
    d)
      export TREE_SITTER_TEST_ENABLE_LOG=1
      ;;
    D)
      export TREE_SITTER_TEST_ENABLE_LOG_GRAPHS=1
      ;;
    g)
      mode=debug
      ;;
  esac
done

shift $(expr $OPTIND - 1)

top_level_filter=${1-}

if [[ \
  -n "$TREE_SITTER_TEST_LANGUAGE_FILTER" || \
  -n "$TREE_SITTER_TEST_EXAMPLE_FILTER" || \
  -n "$TREE_SITTER_TEST_TRIAL_FILTER" \
]]; then
  : ${top_level_filter:=corpus}
fi

# Allow to source this script to just set
# shell environment variables and use `cargo test` directly
if [ "$0" != "$BASH_SOURCE" ]; then
    eval set +${-//[is]/}
    eval set -${shopts//[is]/}
    cargo() {
      case "$1" in
        t|test)
            command cargo test $test_flags "${@:2}"
            ;;
        *)  command cargo "$@"
            ;;
      esac
    }
    return
fi

if [[ "${mode}" == "debug" ]]; then
  test_binary=$(
    cargo test $test_flags --no-run --message-format=json 2> /dev/null |\
    jq -rs 'map(select(.target.name == "tree-sitter-cli" and .executable))[0].executable'
  )
  lldb "${test_binary}" -- $top_level_filter
else
  [ -t 1 ] && color=always || color=never
  cargo test $test_flags --jobs 1 $top_level_filter -- --nocapture --color "$color"
fi
